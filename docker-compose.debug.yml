networks:
  constrsw:
volumes:
  # No terminal, criar o volume externo: "docker volume create constrsw-keycloak-data"
  constrsw-keycloak-data:
    external: true
  # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
  constrsw-postgresql-data:
    external: true
  # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
  constrsw-mongodb-data:
    external: true
services:
  # # PostgreSQL
  # postgresql:
  #   container_name: postgresql
  #   build:
  #     context: ./backend/utils/postgresql/
  #     dockerfile: Dockerfile
  #     args:
  #       - POSTGRES_DB_USER=${POSTGRESQL_USERNAME}
  #       - POSTGRES_DB_PASSWORD=${POSTGRESQL_PASSWORD}
  #   image: constrsw/postgresql
  #   environment:
  #     - POSTGRES_HOST_AUTH_METHOD=trust
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     - POSTGRES_USER=${POSTGRESQL_USERNAME}
  #     - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
  #   volumes:
  #     # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
  #     - constrsw-postgresql-data:/var/lib/postgresql/data
  #   networks:
  #     - constrsw
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     start_period: 10s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   restart: always
  #   # Exemplo de script PostgreSQL para criar um database em um Dockerfile:
  #   # RUN psql --host=postgresql:5432 --username=${POSTGRES_USER} --password ??? \
  #   #     --command="CREATE DATABASE ${POSTGRES_DB_NAME} \
  #   #                 OWNER ${POSTGRES_USER} \
  #   #                 TEMPLATE template0 \
  #   #                 ENCODING 'LATIN1' \
  #   #                 LC_COLLATE 'C' \
  #   #                 LC_CTYPE 'C' \
  #   #                 TABLESPACE pg_default \
  #   #                 CONNECTION LIMIT -1;"
  #   # RUN psql --host=postgresql:5432 --username=${POSTGRES_USER} \
  #   #     --command="GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB_NAME} TO ${POSTGRES_USER};"
  # # MongoDB
  # mongodb:
  #   container_name: mongodb
  #   build:
  #     context: ./backend/utils/mongodb/
  #     dockerfile: Dockerfile
  #   image: constrsw/mongodb
  #   volumes:
  #     # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
  #     - constrsw-mongodb-data:/data/mongodb
  #   networks:
  #     - constrsw
  #   healthcheck:
  #     test: [ "CMD-SHELL", "mongosh --quiet mongodb/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'" ]
  #     start_period: 10s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   restart: always
  # Keycloak
  keycloak:
    container_name: keycloak
    build:
      context: ./backend/utils/keycloak/
      dockerfile: Dockerfile
    image: constrsw/keycloak
    command: start-dev --import-realm
    environment:
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
      - constrsw-keycloak-data:/opt/jboss/keycloak/standalone/data
      - ./backend/utils/keycloak:/opt/keycloak/data/import
    networks:
      - constrsw
    ports:
      - ${KEYCLOAK_EXTERNAL_PORT}:${KEYCLOAK_INTERNAL_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${KEYCLOAK_INTERNAL_HOST}:${KEYCLOAK_INTERNAL_PORT}/health" ]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
#  # OAuth
#   oauth:
#     container_name: oauth
#     build:
#       context: ./backend/utils/oauth/
#       dockerfile: Dockerfile
#     image: constrsw/oauth
#     command: npm run dev
#     environment:
#       - NODE_ENV=development
#       - KEYCLOAK_INTERNAL_HOST=${KEYCLOAK_INTERNAL_HOST}
#       - KEYCLOAK_INTERNAL_PORT=${KEYCLOAK_INTERNAL_PORT}
#       - KEYCLOAK_REALM=${KEYCLOAK_REALM}
#       - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
#       - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
#       - KEYCLOAK_GRANT_TYPE=${KEYCLOAK_GRANT_TYPE}
#       - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
#       - OAUTH_INTERNAL_DEBUG_PORT=${OAUTH_INTERNAL_DEBUG_PORT}
#     networks:
#       - constrsw
#     depends_on:
#       keycloak:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${OAUTH_INTERNAL_HOST}:${OAUTH_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 10s
#       timeout: 10s
#       retries: 20
#     restart: always
# ------------------------- T2 -----------------------------------
#   # Grupo 1: classes
#   classes:
#     container_name: classes
#     build:
#       context: ./backend/classes/
#       dockerfile: Dockerfile
#     environment:
#       - CLASSES_INTERNAL_PORT=${CLASSES_INTERNAL_PORT}
#       - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
#       - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
#       - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
#       - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
#       - POSTGRESQL_DB=postgres
#     networks:
#       - constrsw
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${CLASSES_INTERNAL_HOST}:${CLASSES_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
# # Grupo 2: rooms
#   rooms:
#     container_name: rooms
#     build:
#       context: ./backend/rooms/
#       dockerfile: Dockerfile
#     environment:
#       - ROOMS_INTERNAL_PORT=${ROOMS_INTERNAL_PORT}
#       - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
#       - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
#       - MONGODB_USERNAME=${MONGODB_USERNAME}
#       - MONGODB_PASSWORD=${MONGODB_PASSWORD}
#     networks:
#       - constrsw
#     depends_on:
#       mongodb:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${ROOMS_INTERNAL_HOST}:${ROOMS_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # Grupo 3: lessons
#   lessons:
#     container_name: lessons
#     build:
#       context: ./backend/lessons/
#       dockerfile: Dockerfile
#     environment:
#       - LESSONS_INTERNAL_PORT=${LESSONS_INTERNAL_PORT}
#       - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
#       - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
#       - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
#       - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
#       - POSTGRESQL_DB=postgres
#     networks:
#       - constrsw
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${LESSONS_INTERNAL_HOST}:${LESSONS_INTERNAL_PORT}/lessons/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # Grupo 4: resources
#   resources:
#     container_name: resources
#     build:
#       context: ./backend/resources/
#       dockerfile: Dockerfile
#     environment:
#       - RESOURCES_INTERNAL_PORT=${RESOURCES_INTERNAL_PORT}
#       - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
#       - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
#       - MONGODB_USERNAME=${MONGODB_USERNAME}
#       - MONGODB_PASSWORD=${MONGODB_PASSWORD}
#     networks:
#       - constrsw
#     depends_on:
#       mongodb:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${RESOURCES_INTERNAL_HOST}:${RESOURCES_INTERNAL_PORT}/health" ]
#       start_period: 120s
#       interval: 10s
#       timeout: 10s
#       retries: 5
#   # Grupo 5: courses
#   courses:
#     container_name: courses
#     build:
#       context: ./backend/courses/
#       dockerfile: Dockerfile
#     environment:
#       - COURSES_INTERNAL_PORT=${COURSES_INTERNAL_PORT}
#       - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
#       - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
#       - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
#       - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
#       - POSTGRESQL_DB=postgres
#     networks:
#       - constrsw
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${COURSES_INTERNAL_HOST}:${COURSES_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # Grupo 6: reservations
#   reservations:
#     container_name: reservations
#     build:
#       context: ./backend/reservations/
#       dockerfile: Dockerfile
#     environment:
#       - RESERVATIONS_INTERNAL_PORT=${RESERVATIONS_INTERNAL_PORT}
#       - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
#       - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
#       - MONGODB_USERNAME=${MONGODB_USERNAME}
#       - MONGODB_PASSWORD=${MONGODB_PASSWORD}
#     networks:
#       - constrsw
#     depends_on:
#       mongodb:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${RESERVATIONS_INTERNAL_HOST}:${RESERVATIONS_INTERNAL_PORT}/reservations/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # Grupo 7: students
#   professors:
#     container_name: students
#     build:
#       context: ./backend/students
#       dockerfile: Dockerfile
#     environment:
#       - STUDENTS_INTERNAL_PORT=${STUDENTS_INTERNAL_PORT}
#       - DATABASE_HOST=${POSTGRESQL_INTERNAL_HOST}
#       - DATABASE_PORT=${POSTGRESQL_INTERNAL_PORT}
#       - DATABASE_USER=${POSTGRESQL_USERNAME}
#       - DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
#       - DATABASE_NAME=${POSTGRESQL_DB}
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     networks:
#       - constrsw
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${STUDENTS_INTERNAL_HOST}:${STUDENTS_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # Grupo 8: professors
#   professors:
#     container_name: professors
#     build:
#       context: ./backend/professors
#       dockerfile: Dockerfile
#     environment:
#       - PROFESSORS_INTERNAL_PORT=${PROFESSORS_INTERNAL_PORT}
#       - DATABASE_HOST=${POSTGRESQL_INTERNAL_HOST}
#       - DATABASE_PORT=${POSTGRESQL_INTERNAL_PORT}
#       - DATABASE_USER=${POSTGRESQL_USERNAME}
#       - DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
#       - DATABASE_NAME=${POSTGRESQL_DB}
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     networks:
#       - constrsw
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://${PROFESSORS_INTERNAL_HOST}:${PROFESSORS_INTERNAL_PORT}/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5
#   # BFF
#   bff:
#     container_name: ${BFF_NAME}
#     build:
#       context: ./backend/bff/
#       dockerfile: Dockerfile
#     environment:
#       - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
#       - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
#       - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
#       - BFF_INTERNAL_PORT=${BFF_INTERNAL_PORT}
#       - BFF_INTERNAL_DEBUG_PORT=${BFF_INTERNAL_DEBUG_PORT}
#       - CLASSES_INTERNAL_HOST=${CLASSES_INTERNAL_HOST}
#       - CLASSES_INTERNAL_PORT=${CLASSES_INTERNAL_PORT}
#       - ROOMS_INTERNAL_HOST=${ROOMS_INTERNAL_HOST}
#       - ROOMS_INTERNAL_PORT=${ROOMS_INTERNAL_PORT}
#       - LESSONS_INTERNAL_HOST=${LESSONS_INTERNAL_HOST}
#       - LESSONS_INTERNAL_PORT=${LESSONS_INTERNAL_PORT}
#       - RESOURCES_INTERNAL_HOST=${RESOURCES_INTERNAL_HOST}
#       - RESOURCES_INTERNAL_PORT=${RESOURCES_INTERNAL_PORT}
#       - COURSES_INTERNAL_HOST=${COURSES_INTERNAL_HOST}
#       - COURSES_INTERNAL_PORT=${COURSES_INTERNAL_PORT}
#       - RESERVATIONS_INTERNAL_HOST=${RESERVATIONS_INTERNAL_HOST}
#       - RESERVATIONS_INTERNAL_PORT=${RESERVATIONS_INTERNAL_PORT}
#       - STUDENTS_INTERNAL_HOST=${STUDENTS_INTERNAL_HOST}
#       - STUDENTS_INTERNAL_PORT=${STUDENTS_INTERNAL_PORT}
#       - PROFESSORS_INTERNAL_HOST=${PROFESSORS_INTERNAL_HOST}
#       - PROFESSORS_INTERNAL_PORT=${PROFESSORS_INTERNAL_PORT}
#     networks:
#       - constrsw
#     ports:
#       - ${BFF_EXTERNAL_PORT}:${BFF_INTERNAL_PORT}
#       - ${BFF_EXTERNAL_DEBUG_PORT}:${BFF_INTERNAL_DEBUG_PORT}
#     depends_on:
#       oauth:
#         condition: service_healthy
#       classes:
#         condition: service_started
#       courses:
#         condition: service_healthy
#       lessons:
#         condition: service_healthy
#       professors:
#         condition: service_started
#       reservations:
#         condition: service_healthy
#       resources:
#         condition: service_healthy
#       rooms:
#         condition: service_healthy
#     healthcheck:
#       test: [ "CMD-SHELL", "curl -f http://localhost:8085/health" ]
#       start_period: 10s
#       interval: 5s
#       timeout: 10s
#       retries: 5  # # Frontend
# ------------------------- T3 -----------------------------------
# frontend:
#   container_name: frontend
#   build:
#     context: ./frontend/
#     dockerfile: Dockerfile
#   ports:
#     - 80:80
#   networks:
#     - constrsw
#   # environment:
#   depends_on:
#     bff:
#       condition: service_started
